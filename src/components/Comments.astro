---
import type { SingleComment } from "~/types";
import Comment from "./Comment.astro";
import CommentForm from "./forms/CommentForm.astro";
interface Props {
  comments?: SingleComment[];
  articleId: string;
}
const { comments, articleId } = Astro.props;
const topLevelComments = comments.filter((comment) => !comment.parentId);
const user = Astro.locals.user;
---

<section x-data class="comments flex flex-col gap-6">
  {user && <CommentForm articleId={articleId} />}
  <div class="flex flex-col gap-6">
    <div
      class="comment-target flex flex-col gap-6 divide-y has-[article]:border-b has-[article]:pb-6 has-[article]:-mt-6"
    >
    </div>
    <div class="comments-list flex flex-col gap-6 divide-y">
      {
        topLevelComments.map((comment, index) => (
          <Comment articleId={articleId} isFirst={index === 0} comment={comment} comments={comments} />
        ))
      }
    </div>
  </div>
</section>
<script is:inline>
  document.addEventListener("alpine:init", () => {
    Alpine.store("commentState", {
      open: true,
      toggle() {
        this.open = !this.open;
      },
      disable() {
        this.open = false;
      },
    });
  });
</script>
